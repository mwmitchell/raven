require 'nokogiri'

COLLECTIONS_DIR = File.join(RAILS_ROOT, 'collections')

class FragmentStorage
  
  attr_reader :base_dir, :items
  
  def initialize(base_dir)
    @base_dir = base_dir
    @items = {}
  end
  
  def add(name, content, ext=:xml)
    items[name] = [content, ext]
  end
  
  def store!
    items.each_pair do |name,item|
      path = File.join(base_dir, "#{name.to_s}.#{item.last.to_s}")
      File.open(path, File::CREAT|File::WRONLY|File::TRUNC) do |f|
        f.puts item.first
      end
    end
  end
  
end

def saxon_transform(xsl, source, destination)
  cmds = ["cd #{RAILS_ROOT}/lib/saxonb9-1-0-6j"]
  cmds << "java -jar saxon9.jar -o #{destination} #{source} #{xsl}"
  system cmds.join(' && ')
end

def process_swinburne(copy_name, solr_doc)
  base_path = File.join(COLLECTIONS_DIR, 'swinburne')
  
  storage_path = File.join(base_path, 'fragments', copy_name)
  FileUtils.mkdir_p storage_path rescue nil
  storage = FragmentStorage.new(storage_path)
  
  source = File.join(base_path, 'source', "swinburne#{copy_name}.html")
  
  saxon_transform(
    "#{base_path}/source/Swinburne.xsl",
    "#{base_path}/source/tei-swinburne3#{copy_name}.xml",
    source
  )
  
  doc = Nokogiri::HTML(File.read(source))
  
  toc_code = []
  toc = doc.at('body/div/ol')
  toc.search('//li/a').each do |toc_a|
    anchor_name = toc_a['href'].gsub(/^#/, '')
    anchor = doc.at("a[@name=#{anchor_name}]")
    fragment = anchor.next_sibling
    label = toc_a.text
    field = "#{anchor_name}_s"
    toc_code << {:id => field, :label=>(label.empty? ? 'N/A' : label)}
    solr_doc[field] = fragment.text
    storage.add field, fragment.to_xml, :html
  end
  storage.add(:toc, toc_code.to_json, :json)
  storage.store!
  solr_doc
end

namespace :index do
  
  task :swinburne=>:environment do
    
    RSOLR.delete_by_query('collection_id:"swinburne"')
    RSOLR.commit
    
    ['', '-CW', '-HR', '-MC', '-MU', '-NY'].each do |copy|
      title = "Poems and Ballads#{copy.empty? ? '' : '; ' + copy.gsub(/^-/,'')}"
      solr_doc = {
        :id => "swinburne#{copy}",
        :copy_name_t => copy,
        :collection_id => 'swinburne',
        :collection_title=>'Swinburne',
        :title => title,
        :author_t => 'Algernon Charles Swinburne'
      }
      process_swinburne(copy, solr_doc)
      RSOLR.add solr_doc
    end
    RSOLR.commit
  end
  
end