require 'nokogiri_fragmenter'

=begin
class FragmentStorage
  
  attr_reader :base_dir, :items
  
  def initialize(base_dir)
    @base_dir = base_dir
    @items = {}
  end
  
  def add(name, content, ext=:xml)
    items[name] = [content, ext]
  end
  
  def store!
    items.each_pair do |name,item|
      path = File.join(base_dir, "#{name.to_s}.#{item.last.to_s}")
      File.open(path, File::CREAT|File::WRONLY|File::TRUNC) do |f|
        f.puts item.first
      end
    end
  end
  
end
=end

def source_file_path(copy)
  file = "#{RAILS_ROOT}/collections/swinburne/source/tei-swinburne3"
  file += copy.empty? ? '' : '-' + copy
  file += '.xml'
  file
end

def store_toc(toc, copy)
  file = "#{RAILS_ROOT}/app/views/documents/_swinburne/_toc"
  file += ".#{copy}" unless copy.empty?
  file += ".json"
  File.open(file, File::CREAT|File::TRUNC|File::WRONLY) do |f|
    f.puts toc.to_json
  end
end

def create_solr_docs(xml, base_solr_doc)
  solr_docs = []
  toc = []
  xml.search('//text').each_with_index do |text,index|
    toc << {:label=>text['n'], :id=>nil, :children=>[]}
    NokogiriFragmenter.fragment(text.to_xml, 'pb').each_with_index do |chunk,index2|
      solr_doc = base_solr_doc.dup
      copy_id = solr_doc[:copy_s].empty? ? '' : "-#{solr_doc[:copy_s]}"
      solr_doc.merge!({
        :id         => (solr_doc[:collection_id_s] + copy_id + "-#{index}-#{index2}"),
        :title      => text['n'],
        :title_s    => text['n'],
        :xml_s      => chunk.to_xml,
        :xml_t      => chunk.text
      })
      # make the parent toc item link to the first child
      toc.last[:id] ||= solr_doc[:id]
      page_num = chunk.at('pb')['n'].scan(/[0-9]+/).first
      toc.last[:children] << {:label=>page_num, :id=>solr_doc[:id], :children=>[]}
      # add the doc
      solr_docs << solr_doc
      puts 'Processing next page break...'
    end
    
  end
  
  store_toc(toc, base_solr_doc[:copy_s])
  
  solr_docs
  
end

namespace :swinburne do
  
  task :index=>:environment do
    start = Time.now
    solr_docs = []
    ['', 'CW', 'HR', 'MC', 'MU', 'NY'].each do |copy|
      file = source_file_path(copy)
      xml = Nokogiri::XML(File.read(file))
      base_solr_doc = {
        :copy_s             => copy.empty? ? 'Original' : copy,
        :collection_id_s    => 'swinburne',
        :collection_s       => 'Swinburne: Poems and Ballads',
        :collection_title_s => "Poems and Ballads",
        :author_s           => 'Algernon Charles Swinburne',
        :publisher_t        => xml.at('citnstruct/imprint/publisher').text,
        :printer_t          => xml.at('citnstruct/imprint/printer').text,
        :city_t             => xml.at('citnstruct/imprint/city').text,
        :date_s             => xml.at('citnstruct/imprint/date').text
      }
      solr_docs += create_solr_docs(xml, base_solr_doc)
      puts "Moving on to next file..."
    end
    puts "solr doc creation done!"
    puts "deleting existing collection docs..."
    RSOLR.delete_by_query('collection_id_s:"swinburne"')
    RSOLR.commit
    puts "adding new..."
    RSOLR.add solr_docs
    puts "committing..."
    RSOLR.commit
    RSOLR.optimize
    puts "Total Time: #{Time.now - start}"
  end
  
end